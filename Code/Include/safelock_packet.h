#pragma once

#include "safelock.h"

enum ESAFE_LOCK_CMD
{
	SAFE_LOCK_CHECK_PASS,		// 检查密码
	SAFE_LOCK_RESET_PASS,		// 重置密码

	SAFE_LOCK_LOCK_STATUS,		// 当前锁定状态
	SAFE_LOCK_AUTO_LOCK_STATUS,	// 当前自动锁状态

	SAFE_LOCK_SET_AUTO_LOCK,	// 设置自动锁

	SAFE_LOCK_CHECK_PASS_RESULT,
	SAFE_LOCK_RESET_PASS_RESULT,
	SAFE_LOCK_SET_AUTO_LOCK_RESULT,
	SAFE_LOCK_RESET_PASS_JIAOBEN,		// 重置密码
};

enum ESAFE_LOCK_CHECK_PASS_RESULT
{
	SAFE_LOCK_CHECK_PASS_RESULT_ERROR_PASS_TIMES_MAX,
	SAFE_LOCK_CHECK_PASS_RESULT_ERROR_PASS,
	SAFE_LOCK_CHECK_PASS_RESULT_SUCCESSFUL,
};

enum ESAFE_LOCK_RESET_PASS_RESULT
{
	SAFE_LOCK_RESET_PASS_RESULT_LOCKED,
	SAFE_LOCK_RESET_PASS_RESULT_ERROR_PASS,
	SAFE_LOCK_RESET_PASS_RESULT_SUCCESSFUL,
};

struct SAFE_LOCK_SAFE_LOCK_CHECK_PASS_Data 
{
	char szPass[MAX_LOCK_PASSWORD_LENTH];
};

struct SAFE_LOCK_SAFE_LOCK_RESET_PASS_Data 
{
	char szPass[MAX_LOCK_PASSWORD_LENTH];
	char szNewPass[MAX_LOCK_PASSWORD_LENTH];
};

struct SAFE_LOCK_SAFE_LOCK_RESET_PASS_JIAOBEN_Data
{
	char szPass[MAX_LOCK_PASSWORD_LENTH];
	char szNewPass[MAX_LOCK_PASSWORD_LENTH];
};

struct SAFE_LOCK_SAFE_LOCK_LOCK_STATUS_Data
{
	bool bLock[SAFE_LOCK_TYPE_MAX];
};

struct SAFE_LOCK_SAFE_LOCK_AUTO_LOCK_STATUS_Data
{
	bool bAutoLock[SAFE_LOCK_TYPE_MAX];
};

struct SAFE_LOCK_SAFE_LOCK_SET_AUTO_LOCK_Data
{
	ESAFE_LOCK_TYPE eSafeLockType;
	bool bAutoLock;
};

struct SAFE_LOCK_SAFE_LOCK_CHECK_PASS_RESULT_Data
{
	ESAFE_LOCK_CHECK_PASS_RESULT eResult;
	int nRemainErrorPassTimes;
	int nRemainForbidPassTime;
};

struct SAFE_LOCK_SAFE_LOCK_RESET_PASS_RESULT_Data
{
	ESAFE_LOCK_RESET_PASS_RESULT eResult;
};

struct SAFE_LOCK_SAFE_LOCK_SET_AUTO_LOCK_RESULT_Data
{
	ESAFE_LOCK_TYPE eSafeLockType;
	bool bAutoLock;
	bool bSuccessful;
};